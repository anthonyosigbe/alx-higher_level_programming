===========================
How to Utilize 1-my_list.py
===========================

This module introduces a class ``MyList`` that inherits from ``list``.

Creating an instance
====================

``MyList`` Can be created without providing any arguments, which will return
an empty list:

::

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>

::

    >>> print(my_list)
    []

Or a single argument, which must be an iterable object.

::

    >>> my_list = MyList([1, 2, 3])
    >>> print(my_list)
    [1, 2, 3]

::

    >>> my_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable


A ``TypeError`` will be raised for any more than one instantiation arguments.

::

    >>> my_list = MyList([1, 2], [3, 4])
    Traceback (most recent call last):
    TypeError: list() takes at most 1 argument (2 given)

Test case #0: A test case to order a disordered list of positive integers

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]

    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

    >>> print(my_list)
    [1, 4, 2, 3, 5]

Test case #1: A test case to order a disordered list of positive integers

    >>> my_list = MyList()
    >>> my_list.append(5)
    >>> my_list.append(4)
    >>> my_list.append(3)
    >>> my_list.append(2)
    >>> my_list.append(1)
    >>> print(my_list)
    [5, 4, 3, 2, 1]

    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

    >>> print(my_list)
    [5, 4, 3, 2, 1]

Test case #2: A test case for a empty list

    >>> my_list = MyList()
    >>> print(my_list)
    []

    >>> my_list.print_sorted()
    []

    >>> print(my_list)
    []

Test case #3: A test case for do nothing

    >>> my_list = MyList()
    >>> my_list.append(-5)
    >>> my_list.append(-4)
    >>> my_list.append(-3)
    >>> my_list.append(-2)
    >>> my_list.append(-1)
    >>> print(my_list)
    [-5, -4, -3, -2, -1]

    >>> my_list.print_sorted()
    [-5, -4, -3, -2, -1]

    >>> print(my_list)
    [-5, -4, -3, -2, -1]

Test case #4: A test case to order a disordered list of negative integers

    >>> my_list = MyList()
    >>> my_list.append(-1)
    >>> my_list.append(-4)
    >>> my_list.append(-2)
    >>> my_list.append(-3)
    >>> my_list.append(-5)
    >>> print(my_list)
    [-1, -4, -2, -3, -5]

    >>> my_list.print_sorted()
    [-5, -4, -3, -2, -1]

    >>> print(my_list)
    [-1, -4, -2, -3, -5]
